
//取消左侧的空格,制表键
void triml(char* buf)
{
	int len = strlen(buf);
	char * p = buf;
	for (int i = 0; i < len; i++)
	{
		if (*p == ' ' || *p == '\t')	{ p++; continue; }
		else break;
	}

	if (p == buf)	return;
	else strcpy(buf, p);
}

//取消右侧的空格,制表键
void trimr(char* buf)
{
	int len = strlen(buf);
	char* q = buf + len - 1;
	while (q != buf && (*q == ' ' || *q == '\t'))
	{
		*q = '\0';
		q--;
	}
}

//测试
void test_trim()
{
	char buf[] = "	 key 	=	c d	";//"" " "

	triml( buf);

	if (buf[0] == '\0')		cout << "empty string" << endl;
	else if (buf[0] == '#')		cout << "annotation string" << endl;
	else {}

	//string line(buf);
	char *p = strchr(buf, '=');
//	size_t pos = line.find('=');//找到每行的“=”号  
	if (NULL == p)
	{
		printf("wrong format!\t");
		return ;
	}
	else
	{
		char* q = p + 1;
		*p = '\0';
		trimr(buf);		//取=号之前

		if (0 == strcmp("key", buf))
		{
			triml(q);	//取=号之后  
			trimr(q);
			printf("value=%s", q);;
		}
	}
}

//读取配置文件
static bool readConfigFile(const char * cfgfilepath, const char * key, char * value,  int length)
{
	fstream cfgFile;
	cfgFile.open(cfgfilepath);//打开文件      
	if (!cfgFile.is_open())
	{
		cout << "can not open cfg file!" << endl;
		return false;
	}

	char buf[256];
	while (!cfgFile.eof())//循环读取  
	{
		cfgFile.getline(buf, 1000);

		//
		triml(buf);

		//判断是否空行（）
		if (buf[0] == '\0')		continue;
		//判断注释
		else if (buf[0] == '#')		continue;

		//判断=号
		char *p = strchr(buf, '=');
		if (NULL == p)
		{
			printf("wrong format!\t");
			return false;
		}
		else
		{
			char* q = p + 1;
			*p = '\0';
			trimr(buf);		//去掉=号之前的空格，制表符

			if (0 == strcmp(key, buf))
			{
				triml(q);	//去掉=号之后......
				trimr(q);

				unsigned int len = strlen(q);
				if (len > length)
				{
					printf("more length needed!\n");
					return false;
				}
				else
				{
					strcpy(value, q);
					return true;
				}
				
			}
		}
	}

	return false;
}
